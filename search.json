[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\nlibrary(readxl)\n\n\n# 2.0 Importing Files ----\n# A good convention is to use the file name and suffix it with tbl for the data structure tibble\nbikes_tbl      <- read_excel(path = \"00_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl <- read_excel(\"00_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n# Not necessary for this analysis, but for the sake of completeness\nbikeshops_tbl  <- read_excel(\"00_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n# 3.0 Examining Data ----\n# Method 1: Print it to the console\n# orderlines_tbl\n\n# Method 2: Clicking on the file in the environment tab (or run View(orderlines_tbl)) There you can play around with the filter.\n# View(orderlines_tbl)\n\n# Method 3: glimpse() function. Especially helpful for wide data (data with many columns)\nglimpse(orderlines_tbl)\n\n# 4.0 Joining Data ----\n# by automatically detecting a common column, if any ...\n# left_join(orderlines_tbl, bikes_tbl)\n\n# If the data has no common column name, you can provide each column name in the \"by\" argument. For example, by = c(\"a\" = \"b\") will match x.a to y.b. The order of the columns has to match the order of the tibbles).\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n# Chaining commands with the pipe and assigning it to order_items_joined_tbl\nbike_orderlines_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# Examine the results with glimpse()\nbike_orderlines_joined_tbl %>% glimpse()\n\n# 5.0 Wrangling Data ----\n# print all unique entries, that start with Mountain\nbike_orderlines_joined_tbl %>% \n  select(category) %>%\n  filter(str_detect(category, \"^Mountain\")) %>% \n  unique()\n\n# All actions are chained with the pipe already. You can perform each step separately and use glimpse() or View() to validate your code. Store the result in a variable at the end of the steps.\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%\n  # 5.1 Separate category name\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %>%\n  \n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %>%\n  \n  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns\n  # 5.3.1 by exact column name\n  select(-...1, -gender) %>%\n  \n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns. \n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %>%\n  \n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% \n  \n  # 5.3.4 You can reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n  \n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\n\n# 6.0 Business Insights ----\n# 6.1 Sales by Year ----\n\n# Step 1 - Manipulate\nsales_by_year_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns\n  select(order_date, total_price) %>%\n  \n  # Add year column\n  mutate(year = year(order_date)) %>%\n  \n  # Grouping by year and summarizing sales\n  group_by(year) %>% \n  summarize(sales = sum(total_price)) %>%\n  \n  # Optional: Add a column that turns the numbers into a currency format \n  # (makes it in the plot optically more appealing)\n  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_year_tbl\n\n# Step 2 - Visualize\nsales_by_year_tbl %>%\n  \n  # Setup canvas with the columns year (x-axis) and sales (y-axis)\n  ggplot(aes(x = year, y = sales)) +\n  \n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n  \n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by year\",\n    subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n\n# 6.2 Sales by Year and Category 2 ----\n\n# Step 1 - Manipulate\nsales_by_year_cat_1_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns and add a year\n  select(order_date, total_price, category_1) %>%\n  mutate(year = year(order_date)) %>%\n  \n  # Group by and summarize year and main catgegory\n  group_by(year, category_1) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_year_cat_1_tbl  \n\n# Step 2 - Visualize\nsales_by_year_cat_1_tbl %>%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = category_1)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  \n  # Facet\n  facet_wrap(~ category_1) +\n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by year and main category\",\n    subtitle = \"Each product category has an upward trend\",\n    fill = \"Main category\" # Changes the legend name\n  )\n\n\n# 7.0 Writing Files ----\n\n# 7.1 Excel ----\ninstall.packages(\"writexl\")\nlibrary(\"writexl\")\nbike_orderlines_wrangled_tbl %>%\n  write_xlsx(\"00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx\")\n\n# 7.2 CSV ----\nbike_orderlines_wrangled_tbl %>% \n  write_csv(\"00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv\")\n\n# 7.3 RDS ----\nbike_orderlines_wrangled_tbl %>% \n  write_rds(\"00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds\")\n\n\n \n\n\n\n\n\n\nNote\n\n\n\nYou can delete everything in here and start fresh.\n\n\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n3.1 Header 2",
    "text": "3.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  }
]