[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "(Code mainly from startupengineer templates)\n\n# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\nlibrary(readxl)\n\n\n# 2.0 Importing Files ----\n# A good convention is to use the file name and suffix it with tbl for the data structure tibble\nbikes_tbl      &lt;- read_excel(path = \"./../../00_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl &lt;- read_excel(\"./../../00_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\n# Not necessary for this analysis, but for the sake of completeness\nbikeshops_tbl  &lt;- read_excel(\"./../../00_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n# 3.0 Examining Data ----\n# Method 1: Print it to the console\n# orderlines_tbl\n\n# Method 2: Clicking on the file in the environment tab (or run View(orderlines_tbl)) There you can play around with the filter.\n# View(orderlines_tbl)\n\n# Method 3: glimpse() function. Especially helpful for wide data (data with many columns)\nglimpse(orderlines_tbl)\n\n#&gt; Rows: 15,644\n#&gt; Columns: 7\n#&gt; $ ...1        &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"…\n#&gt; $ order.id    &lt;dbl&gt; 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7…\n#&gt; $ order.line  &lt;dbl&gt; 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2…\n#&gt; $ order.date  &lt;dttm&gt; 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-01-1…\n#&gt; $ customer.id &lt;dbl&gt; 2, 2, 10, 10, 6, 6, 6, 6, 6, 22, 8, 8, 8, 8, 16, 16, 16, 1…\n#&gt; $ product.id  &lt;dbl&gt; 2681, 2411, 2629, 2137, 2367, 1973, 2422, 2655, 2247, 2408…\n#&gt; $ quantity    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1…\n\n# 4.0 Joining Data ----\n# by automatically detecting a common column, if any ...\n# left_join(orderlines_tbl, bikes_tbl)\n\n# If the data has no common column name, you can provide each column name in the \"by\" argument. For example, by = c(\"a\" = \"b\") will match x.a to y.b. The order of the columns has to match the order of the tibbles).\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\n# Chaining commands with the pipe and assigning it to order_items_joined_tbl\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# Examine the results with glimpse()\nbike_orderlines_joined_tbl %&gt;% glimpse()\n\n#&gt; Rows: 15,644\n#&gt; Columns: 19\n#&gt; $ ...1           &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"…\n#&gt; $ order.id       &lt;dbl&gt; 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7…\n#&gt; $ order.line     &lt;dbl&gt; 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1…\n#&gt; $ order.date     &lt;dttm&gt; 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0…\n#&gt; $ customer.id    &lt;dbl&gt; 2, 2, 10, 10, 6, 6, 6, 6, 6, 22, 8, 8, 8, 8, 16, 16, 16…\n#&gt; $ product.id     &lt;dbl&gt; 2681, 2411, 2629, 2137, 2367, 1973, 2422, 2655, 2247, 2…\n#&gt; $ quantity       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1…\n#&gt; $ model          &lt;chr&gt; \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"…\n#&gt; $ model.year     &lt;dbl&gt; 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#&gt; $ frame.material &lt;chr&gt; \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c…\n#&gt; $ weight         &lt;dbl&gt; 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4…\n#&gt; $ price          &lt;dbl&gt; 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#&gt; $ category       &lt;chr&gt; \"Mountain - Trail - Spectral\", \"Road - Race - Ultimate\"…\n#&gt; $ gender         &lt;chr&gt; \"female\", \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"unis…\n#&gt; $ url            &lt;chr&gt; \"https://www.canyon.com/en-de/mountain-bikes/trail-bike…\n#&gt; $ name           &lt;chr&gt; \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"…\n#&gt; $ location       &lt;chr&gt; \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen…\n#&gt; $ lat            &lt;dbl&gt; 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78…\n#&gt; $ lng            &lt;dbl&gt; 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1…\n\n# 5.0 Wrangling Data ----\n# print all unique entries, that start with Mountain\nbike_orderlines_joined_tbl %&gt;% \n  select(category) %&gt;%\n  filter(str_detect(category, \"^Mountain\")) %&gt;% \n  unique()\n\n\n\n  \n\n\n# All actions are chained with the pipe already. You can perform each step separately and use glimpse() or View() to validate your code. Store the result in a variable at the end of the steps.\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n  # 5.1 Separate category name\n  separate(col    = category,\n           into   = c(\"category.1\", \"category.2\", \"category.3\"),\n           sep    = \" - \") %&gt;%\n  \n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %&gt;%\n  \n  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns\n  # 5.3.1 by exact column name\n  select(-...1, -gender) %&gt;%\n  \n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns. \n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %&gt;%\n  \n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% \n  \n  # 5.3.4 You can reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %&gt;%\n  \n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n\n# 6.0 Business Insights ----\n# 6.1 Sales by Year ----\n\n# Step 1 - Manipulate\nsales_by_year_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n  # Select columns\n  select(order_date, total_price) %&gt;%\n  \n  # Add year column\n  mutate(year = year(order_date)) %&gt;%\n  \n  # Grouping by year and summarizing sales\n  group_by(year) %&gt;% \n  summarize(sales = sum(total_price)) %&gt;%\n  \n  # Optional: Add a column that turns the numbers into a currency format \n  # (makes it in the plot optically more appealing)\n  # mutate(sales_text = scales::dollar(sales)) &lt;- Works for dollar values\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_year_tbl\n\n\n\n  \n\n\n# Step 2 - Visualize\nsales_by_year_tbl %&gt;%\n  \n  # Setup canvas with the columns year (x-axis) and sales (y-axis)\n  ggplot(aes(x = year, y = sales)) +\n  \n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n  \n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by year\",\n    subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n# 6.2 Sales by Year and Category 2 ----\n\n# Step 1 - Manipulate\nsales_by_year_cat_1_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n  # Select columns and add a year\n  select(order_date, total_price, category_1) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  \n  # Group by and summarize year and main catgegory\n  group_by(year, category_1) %&gt;%\n  summarise(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_year_cat_1_tbl  \n\n\n\n  \n\n\n# Step 2 - Visualize\nsales_by_year_cat_1_tbl %&gt;%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = category_1)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  \n  # Facet\n  facet_wrap(~ category_1) +\n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by year and main category\",\n    subtitle = \"Each product category has an upward trend\",\n    fill = \"Main category\" # Changes the legend name\n  )\n\n\n\n\n\n\n# 7.0 Writing Files ----\n\n# 7.1 Excel ----\n# install.packages(\"writexl\")\nlibrary(\"writexl\")\nbike_orderlines_wrangled_tbl %&gt;%\n  write_xlsx(\"./../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx\")\n\n# 7.2 CSV ----\nbike_orderlines_wrangled_tbl %&gt;% \n  write_csv(\"./../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv\")\n\n# 7.3 RDS ----\nbike_orderlines_wrangled_tbl %&gt;% \n  write_rds(\"./../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#part-1---revenue-by-state",
    "href": "content/01_journal/01_tidyverse.html#part-1---revenue-by-state",
    "title": "Tidyverse",
    "section": "\n2.1 Part 1 - Revenue by state",
    "text": "2.1 Part 1 - Revenue by state\n\n# 8.0 Challenge ----\n# 8.1 Manipulate Data\n# Separate city and state\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \")\n  \n# Extract state data\nsales_by_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n  # Select columns and add a year\n  select(state, total_price) %&gt;%\n  \n  # Group by and summarize year and main catgegory\n  group_by(state) %&gt;%\n  summarise(sales = sum(total_price)) %&gt;%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n  # extract state with highes sales \n  highest_value_state &lt;- sales_by_state_tbl[which.max( sales_by_state_tbl$sales ),1]\n\n\n# 8.2 Visualize Data \nsales_by_state_tbl %&gt;%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = state, y = sales)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  \n  # Formatting\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by state\",\n    subtitle = paste0(\"The state with the highest revenue is \", highest_value_state),\n    x = \"State\",\n    y = \"Revenue\"\n  )"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#part-2---revenue-by-year-and-state",
    "href": "content/01_journal/01_tidyverse.html#part-2---revenue-by-year-and-state",
    "title": "Tidyverse",
    "section": "\n2.2 Part 2 - Revenue by year and state",
    "text": "2.2 Part 2 - Revenue by year and state\n\n# 8.2 Sales by Year and Location ----\n\n# # Step 1 - Manipulate\nsales_by_year_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  \n  # Select columns and add a year\n  select(order_date, total_price, state) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  \n  # Group by and summarize year and main catgegory\n  group_by(year, state) %&gt;%\n  summarise(sales = sum(total_price)) %&gt;%\n  ungroup() %&gt;%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_year_state_tbl  \n\n\n\n  \n\n\n\n\n# Step 2 - Visualize\nsales_by_year_state_tbl %&gt;%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  \n  # Facet\n  facet_wrap(~ state) +\n  \n  # Formatting\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by year and state\",\n    fill = \"Main category\" # Changes the legend name\n  )"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Tidyverse",
    "section": "",
    "text": "(Code mainly from startupengineer templates)\nBusiness code commented out because of website changes.\n\n# WEBSCRAPING ----\n\n# 1.0 LIBRARIES ----\n\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rvest)     # HTML Hacking & Web Scraping\n\n#&gt; \n#&gt; Attaching package: 'rvest'\n#&gt; \n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     guess_encoding\n\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\n\n#&gt; \n#&gt; Attaching package: 'jsonlite'\n#&gt; \n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     flatten\n\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(RSQLite)\nlibrary(httr)\n\n# Import and list tables\ncon &lt;- RSQLite::dbConnect(drv = SQLite(), dbname = \"./../../00_data/02_chinook/Chinook_Sqlite.sqlite\")\ndbListTables(con)\n\n#&gt;  [1] \"Album\"         \"Artist\"        \"Customer\"      \"Employee\"     \n#&gt;  [5] \"Genre\"         \"Invoice\"       \"InvoiceLine\"   \"MediaType\"    \n#&gt;  [9] \"Playlist\"      \"PlaylistTrack\" \"Track\"\n\n# Look at a table\ntbl(con, \"Album\")\n\n\n\n  \n\n\n# Save data to memory\nalbum_tbl &lt;- tbl(con, \"Album\") %&gt;% collect()\n\n# Close database connection\ndbDisconnect(con)\ncon\n\n#&gt; &lt;SQLiteConnection&gt;\n#&gt;   DISCONNECTED\n\n# glue string interpolation example\nname &lt;- \"Fred\"\nglue('My name is {name}.')\n\n#&gt; My name is Fred.\n\n# API GET example\nresp &lt;- GET(\"https://swapi.dev/api/people/1/\")\n\n# Wrapped into a function\nsw_api &lt;- function(path) {\n  url &lt;- modify_url(url = \"https://swapi.dev\", path = glue(\"/api{path}\"))\n  resp &lt;- GET(url)\n  stop_for_status(resp) # automatically throws an error if a request did not succeed\n}\n\n# API GET function example\nresp &lt;- sw_api(\"/people/1\")\nresp\n\n#&gt; Response [https://swapi.dev/api/people/1]\n#&gt;   Date: 2023-05-22 14:58\n#&gt;   Status: 200\n#&gt;   Content-Type: application/json\n#&gt;   Size: 647 B\n\n# convert API response body\nresp_extracted &lt;- rawToChar(resp$content)  %&gt;% fromJSON()\nresp_extracted\n\n#&gt; $name\n#&gt; [1] \"Luke Skywalker\"\n#&gt; \n#&gt; $height\n#&gt; [1] \"172\"\n#&gt; \n#&gt; $mass\n#&gt; [1] \"77\"\n#&gt; \n#&gt; $hair_color\n#&gt; [1] \"blond\"\n#&gt; \n#&gt; $skin_color\n#&gt; [1] \"fair\"\n#&gt; \n#&gt; $eye_color\n#&gt; [1] \"blue\"\n#&gt; \n#&gt; $birth_year\n#&gt; [1] \"19BBY\"\n#&gt; \n#&gt; $gender\n#&gt; [1] \"male\"\n#&gt; \n#&gt; $homeworld\n#&gt; [1] \"https://swapi.dev/api/planets/1/\"\n#&gt; \n#&gt; $films\n#&gt; [1] \"https://swapi.dev/api/films/1/\" \"https://swapi.dev/api/films/2/\"\n#&gt; [3] \"https://swapi.dev/api/films/3/\" \"https://swapi.dev/api/films/6/\"\n#&gt; \n#&gt; $species\n#&gt; list()\n#&gt; \n#&gt; $vehicles\n#&gt; [1] \"https://swapi.dev/api/vehicles/14/\" \"https://swapi.dev/api/vehicles/30/\"\n#&gt; \n#&gt; $starships\n#&gt; [1] \"https://swapi.dev/api/starships/12/\" \"https://swapi.dev/api/starships/22/\"\n#&gt; \n#&gt; $created\n#&gt; [1] \"2014-12-09T13:50:51.644000Z\"\n#&gt; \n#&gt; $edited\n#&gt; [1] \"2014-12-20T21:17:56.891000Z\"\n#&gt; \n#&gt; $url\n#&gt; [1] \"https://swapi.dev/api/people/1/\"\n\n# Test list\ndata_list &lt;- list(strings= c(\"string1\", \"string2\"), \n                  numbers = c(1,2,3), \n                  TRUE, \n                  100.23, \n                  tibble(\n                    A = c(1,2), \n                    B = c(\"x\", \"y\")\n                  )\n)\n\n# access list\nresp %&gt;% \n  .$content %&gt;% \n  rawToChar() %&gt;% \n  fromJSON()\n\n#&gt; $name\n#&gt; [1] \"Luke Skywalker\"\n#&gt; \n#&gt; $height\n#&gt; [1] \"172\"\n#&gt; \n#&gt; $mass\n#&gt; [1] \"77\"\n#&gt; \n#&gt; $hair_color\n#&gt; [1] \"blond\"\n#&gt; \n#&gt; $skin_color\n#&gt; [1] \"fair\"\n#&gt; \n#&gt; $eye_color\n#&gt; [1] \"blue\"\n#&gt; \n#&gt; $birth_year\n#&gt; [1] \"19BBY\"\n#&gt; \n#&gt; $gender\n#&gt; [1] \"male\"\n#&gt; \n#&gt; $homeworld\n#&gt; [1] \"https://swapi.dev/api/planets/1/\"\n#&gt; \n#&gt; $films\n#&gt; [1] \"https://swapi.dev/api/films/1/\" \"https://swapi.dev/api/films/2/\"\n#&gt; [3] \"https://swapi.dev/api/films/3/\" \"https://swapi.dev/api/films/6/\"\n#&gt; \n#&gt; $species\n#&gt; list()\n#&gt; \n#&gt; $vehicles\n#&gt; [1] \"https://swapi.dev/api/vehicles/14/\" \"https://swapi.dev/api/vehicles/30/\"\n#&gt; \n#&gt; $starships\n#&gt; [1] \"https://swapi.dev/api/starships/12/\" \"https://swapi.dev/api/starships/22/\"\n#&gt; \n#&gt; $created\n#&gt; [1] \"2014-12-09T13:50:51.644000Z\"\n#&gt; \n#&gt; $edited\n#&gt; [1] \"2014-12-20T21:17:56.891000Z\"\n#&gt; \n#&gt; $url\n#&gt; [1] \"https://swapi.dev/api/people/1/\"\n\n# directly parse body\n# content(resp, as = \"text\")\n# content(resp, as = \"parsed\")\ncontent(resp)\n\n#&gt; $name\n#&gt; [1] \"Luke Skywalker\"\n#&gt; \n#&gt; $height\n#&gt; [1] \"172\"\n#&gt; \n#&gt; $mass\n#&gt; [1] \"77\"\n#&gt; \n#&gt; $hair_color\n#&gt; [1] \"blond\"\n#&gt; \n#&gt; $skin_color\n#&gt; [1] \"fair\"\n#&gt; \n#&gt; $eye_color\n#&gt; [1] \"blue\"\n#&gt; \n#&gt; $birth_year\n#&gt; [1] \"19BBY\"\n#&gt; \n#&gt; $gender\n#&gt; [1] \"male\"\n#&gt; \n#&gt; $homeworld\n#&gt; [1] \"https://swapi.dev/api/planets/1/\"\n#&gt; \n#&gt; $films\n#&gt; $films[[1]]\n#&gt; [1] \"https://swapi.dev/api/films/1/\"\n#&gt; \n#&gt; $films[[2]]\n#&gt; [1] \"https://swapi.dev/api/films/2/\"\n#&gt; \n#&gt; $films[[3]]\n#&gt; [1] \"https://swapi.dev/api/films/3/\"\n#&gt; \n#&gt; $films[[4]]\n#&gt; [1] \"https://swapi.dev/api/films/6/\"\n#&gt; \n#&gt; \n#&gt; $species\n#&gt; list()\n#&gt; \n#&gt; $vehicles\n#&gt; $vehicles[[1]]\n#&gt; [1] \"https://swapi.dev/api/vehicles/14/\"\n#&gt; \n#&gt; $vehicles[[2]]\n#&gt; [1] \"https://swapi.dev/api/vehicles/30/\"\n#&gt; \n#&gt; \n#&gt; $starships\n#&gt; $starships[[1]]\n#&gt; [1] \"https://swapi.dev/api/starships/12/\"\n#&gt; \n#&gt; $starships[[2]]\n#&gt; [1] \"https://swapi.dev/api/starships/22/\"\n#&gt; \n#&gt; \n#&gt; $created\n#&gt; [1] \"2014-12-09T13:50:51.644000Z\"\n#&gt; \n#&gt; $edited\n#&gt; [1] \"2014-12-20T21:17:56.891000Z\"\n#&gt; \n#&gt; $url\n#&gt; [1] \"https://swapi.dev/api/people/1/\"\n\n# call to alpha vantage api\nresp &lt;- GET('https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=WDI.DE')\nresp\n\n#&gt; Response [https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=WDI.DE]\n#&gt;   Date: 2023-05-22 14:58\n#&gt;   Status: 200\n#&gt;   Content-Type: application/json\n#&gt;   Size: 189 B\n#&gt; {\n#&gt;     \"Error Message\": \"the parameter apikey is invalid or missing. Please clai...\n\n# test the renviron file\nuserid &lt;- Sys.getenv('userid')\npwd &lt;- Sys.getenv('pwd')\nkey &lt;- Sys.getenv('key')\n\n# web scraping example\n# get the URL for the wikipedia page with all S&P 500 symbols\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n# use that URL to scrape the S&P 500 table using rvest\nlibrary(rvest)\nsp_500 &lt;- url %&gt;%\n  # read the HTML from the webpage\n  read_html() %&gt;%\n  # Get the nodes with the id\n  html_nodes(css = \"#constituents\") %&gt;%\n  # html_nodes(xpath = \"//*[@id='constituents']\"\") %&gt;% \n  # Extract the table and turn the list into a tibble\n  html_table() %&gt;% \n  .[[1]] %&gt;% \n  as_tibble()\n\n# web scraping example 2\nurl  &lt;- \"https://www.imdb.com/chart/top/?ref_=nv_mv_250\"\nhtml &lt;- url %&gt;% \n  read_html\n\n# get the ranks\nrank &lt;-  html %&gt;% \n  html_nodes(css = \".titleColumn\") %&gt;% \n  html_text() %&gt;% \n  # Extrag all digits between \" \" and \".\\n\" The \"\\\" have to be escaped\n  # You can use Look ahead \"&lt;=\" and Look behind \"?=\" for this\n  stringr::str_extract(\"(?&lt;= )[0-9]*(?=\\\\.\\\\n)\")%&gt;% \n  # Make all values numeric\n  as.numeric()\n\n# get the titles\ntitle &lt;- html %&gt;% \n  html_nodes(\".titleColumn &gt; a\") %&gt;% \n  html_text()\n\n# get the year\nyear &lt;- html %&gt;% \n  html_nodes(\".titleColumn .secondaryInfo\") %&gt;%\n  html_text() %&gt;% \n  # Extract numbers\n  stringr::str_extract(pattern = \"[0-9]+\") %&gt;% \n  as.numeric()\n\n# get the people\npeople &lt;- html %&gt;% \n  html_nodes(\".titleColumn &gt; a\") %&gt;% \n  html_attr(\"title\")\n\n# get the ratings\nrating &lt;- html %&gt;% \n  html_nodes(css = \".imdbRating &gt; strong\") %&gt;% \n  html_text() %&gt;% \n  as.numeric()\n\n# get the number of ratings\nnum_ratings &lt;- html %&gt;% \n  html_nodes(css = \".imdbRating &gt; strong\") %&gt;% \n  html_attr('title') %&gt;% \n  # Extract the numbers and remove the comma to make it numeric values\n  stringr::str_extract(\"(?&lt;=based on ).*(?=\\ user ratings)\" ) %&gt;% \n  stringr::str_replace_all(pattern = \",\", replacement = \"\") %&gt;% \n  as.numeric()\n\n# merge everything\nimdb_tbl &lt;- tibble(rank, title, year, people, rating, num_ratings)\n\n# # read bike data from json file\n# bike_data_lst &lt;- fromJSON(\"bike_data.json\")\n# # Open the data by clicking on it in the environment or by running View()\n# View(bike_data_lst)\n# \n# # color path\n# # productDetail --&gt; variationAttributes --&gt; values --&gt; [[1]] --&gt; displayValue\n# bike_data_lst[[\"productDetail\"]][[\"variationAttributes\"]][[\"values\"]][[1]][[\"displayValue\"]]\n# \n# # color extraction using pluck\n# bike_data_lst %&gt;%\n#   purrr::pluck(\"productDetail\", \"variationAttributes\", \"values\", 1, \"displayValue\")\n\n# Scraping example\n  # # 1.1 collect product families ----\n  # \n  # url_home          &lt;- \"https://www.canyon.com/en-de\"\n  # xopen(url_home) # Open links directly from RStudio to inspect them\n  # \n  # # Read in the HTML for the entire webpage\n  # html_home         &lt;- read_html(url_home)\n  # \n  # # Web scrape the ids for the families\n  # bike_family_tbl &lt;- html_home %&gt;%\n  #   \n  #   # Get the nodes for the families ...\n  #   html_nodes(css = \".js-navigationDrawer__list--secondary\") %&gt;%\n  #   # ...and extract the information of the id attribute\n  #   html_attr('id') %&gt;%\n  #   \n  #   # Remove the product families Gear and Outlet and Woman \n  #   # (because the female bikes are also listed with the others)\n  #   discard(.p = ~stringr::str_detect(.x,\"WMN|WOMEN|GEAR|OUTLET\")) %&gt;%\n  #   \n  #   # Convert vector to tibble\n  #   enframe(name = \"position\", value = \"family_class\") %&gt;%\n  #   \n  #   # Add a hashtag so we can get nodes of the categories by id (#)\n  #   mutate(\n  #     family_id = str_glue(\"#{family_class}\")\n  #   )\n  # \n  # bike_family_tbl\n  # \n  # # 1.2 COLLECT PRODUCT CATEGORIES ----\n  # \n  # # Combine all Ids to one string so that we will get all nodes at once\n  # # (seperated by the OR operator \",\")\n  # family_id_css &lt;- bike_family_tbl %&gt;%\n  #   pull(family_id) %&gt;%\n  #   stringr::str_c(collapse = \", \")\n  # family_id_css\n  # ## \"#js-navigationList-ROAD, #js-navigationList-MOUNTAIN, #js-navigationList-EBIKES, #js-navigationList-HYBRID-CITY, #js-navigationList-YOUNGHEROES\"\n  # \n  # # Extract the urls from the href attribute\n  # bike_category_tbl &lt;- html_home %&gt;%\n  #   \n  #   # Select nodes by the ids\n  #   html_nodes(css = family_id_css) %&gt;%\n  #   \n  #   # Going further down the tree and select nodes by class\n  #   # Selecting two classes makes it specific enough\n  #   html_nodes(css = \".navigationListSecondary__listItem .js-ridestyles\") %&gt;%\n  #   html_attr('href') %&gt;%\n  #   \n  #   # Convert vector to tibble\n  #   enframe(name = \"position\", value = \"subdirectory\") %&gt;%\n  #   \n  #   # Add the domain, because we will get only the subdirectories\n  #   mutate(\n  #     url = glue(\"https://www.canyon.com{subdirectory}\")\n  #   ) %&gt;%\n  #   \n  #   # Some categories are listed multiple times.\n  #   # We only need unique values\n  #   distinct(url)\n  # \n  # bike_category_tbl\n  # \n  # # 2.0 COLLECT BIKE DATA ----\n  # \n  # # 2.1 Get URL for each bike of the Product categories\n  # \n  # # select first bike category url\n  # bike_category_url &lt;- bike_category_tbl$url[1]\n  # \n  # # Alternatives for selecting values\n  # # bike_category_url &lt;- bike_category_tbl %$% url %&gt;% .[1]\n  # # bike_category_url &lt;- bike_category_tbl %&gt;% pull(url) %&gt;% .[1]\n  # # bike_category_url &lt;- deframe(bike_category_tbl[1,])\n  # # bike_category_url &lt;- bike_category_tbl %&gt;% first %&gt;% first\n  # \n  # xopen(bike_category_url)\n  # \n  # # Get the URLs for the bikes of the first category\n  # html_bike_category  &lt;- read_html(bike_category_url)\n  # bike_url_tbl        &lt;- html_bike_category %&gt;%\n  #   \n  #   # Get the 'a' nodes, which are hierarchally underneath \n  #   # the class productTile__contentWrapper\n  #   html_nodes(css = \".productTile__contentWrapper &gt; a\") %&gt;%\n  #   html_attr(\"href\") %&gt;%\n  #   \n  #   # Remove the query parameters of the URL (everything after the '?')\n  #   str_remove(pattern = \"\\\\?.*\") %&gt;%\n  #   \n  #   # Convert vector to tibble\n  #   enframe(name = \"position\", value = \"url\")\n  # \n  # # 2.1.2 Extract the descriptions (since we have retrieved the data already)\n  # bike_desc_tbl &lt;- html_bike_category %&gt;%\n  #   \n  #   # Get the nodes in the meta tag where the attribute itemprop equals description\n  #   html_nodes('.productTile__productSummaryLeft &gt; meta[itemprop=\"description\"]') %&gt;%\n  #   \n  #   # Extract the content of the attribute content\n  #   html_attr(\"content\") %&gt;%\n  #   \n  #   # Convert vector to tibble\n  #   enframe(name = \"position\", value = \"description\")\n  # \n  # # 2.1.3 Get even more data from JSON files\n  # bike_json_tbl  &lt;- html_bike_category %&gt;%\n  #   \n  #   html_nodes(css = '.productGrid__listItem.xlt-producttile &gt; div') %&gt;%\n  #   html_attr(\"data-gtm-impression\") %&gt;%\n  #   \n  #   # Convert the JSON format to dataframe\n  #   # map runs that function on each element of the list\n  #   map(fromJSON) %&gt;% # need JSON ### need lists\n  #   \n  #   # Extract relevant information of the nested list\n  #   map(purrr::pluck, 2, \"impressions\") %&gt;% # Need purrr and expl above\n  #   \n  #   # Set \"not defined\" and emtpy fields to NA (will be easier to work with)\n  #   map(na_if, \"not defined\") %&gt;%\n  #   map(na_if, \"\") %&gt;%\n  #   \n  #   # The class of dimension56 and price varies between numeric and char.\n  #   # This converts this column in each list to numeric\n  #   # across allows to perform the same operation on multiple columns\n  #   map(~mutate(., across(c(\"dimension56\",\"price\"), as.numeric))) %&gt;%\n  #   \n  #   # Stack all lists together\n  #   bind_rows() %&gt;%\n  #   # Convert to tibble so that we have the same data format\n  #   as_tibble() %&gt;%\n  #   \n  #   # Add consecutive numbers so that we can bind all data together\n  #   # You could have also just use bind_cols()\n  #   rowid_to_column(var='position') %&gt;%\n  #   left_join(bike_desc_tbl) %&gt;%\n  #   left_join(bike_url_tbl)\n  # \n  # # 2.2 Wrap it into a function ----\n  # get_bike_data &lt;- function(url) {\n  #   \n  #   html_bike_category &lt;- read_html(url)\n  #   \n  #   # Get the URLs\n  #   bike_url_tbl  &lt;- html_bike_category %&gt;%\n  #     html_nodes(css = \".productTile__contentWrapper &gt; a\") %&gt;%\n  #     html_attr(\"href\") %&gt;%\n  #     str_remove(pattern = \"\\\\?.*\") %&gt;%\n  #     enframe(name = \"position\", value = \"url\")\n  #   \n  #   # Get the descriptions\n  #   bike_desc_tbl &lt;- html_bike_category %&gt;%\n  #     html_nodes(css = '.productTile__productSummaryLeft &gt; \n  #                       meta[itemprop=\"description\"]') %&gt;%\n  #     html_attr(\"content\") %&gt;%\n  #     enframe(name = \"position\", value = \"description\")\n  #   \n  #   # Get JSON data\n  #   bike_json_tbl &lt;- html_bike_category %&gt;%\n  #     html_nodes(css = '.productGrid__listItem.xlt-producttile &gt; div') %&gt;%\n  #     html_attr(\"data-gtm-impression\") %&gt;%\n  #     map(fromJSON) %&gt;% # need JSON ### need lists\n  #     map(purrr::pluck, 2, \"impressions\") %&gt;% \n  #     map(na_if, \"not defined\") %&gt;%\n  #     map(na_if, \"\") %&gt;%\n  #     map(~mutate(., across(c(\"dimension56\",\"price\"), as.numeric))) %&gt;%\n  #     bind_rows() %&gt;%\n  #     as_tibble() %&gt;%\n  #     rowid_to_column(var='position') %&gt;%\n  #     left_join(bike_desc_tbl) %&gt;%\n  #     left_join(bike_url_tbl)\n  # }\n  # \n  # # Run the function with the first url to check if it is working\n  # bike_category_url &lt;- bike_category_tbl$url[1]\n  # bike_data_tbl     &lt;- get_bike_data(url = bike_category_url)\n  # \n  # bike_data_tbl\n  # \n  # # 2.3.1a Map the function against all urls\n  # \n  # # Extract the urls as a character vector\n  # bike_category_url_vec &lt;- bike_category_tbl %&gt;% \n  #   pull(url)\n  # \n  # # Run the function with every url as an argument\n  # bike_data_lst &lt;- map(bike_category_url_vec, get_bike_data)\n  # \n  # # Merge the list into a tibble\n  # bike_data_tbl &lt;- bind_rows(bike_data_lst)\n  # saveRDS(bike_data_tbl, \"bike_data_tbl.rds\")\n  # \n  # # 2.3.1b Alternative with a for loop\n  # \n  # # Create an empty tibble, that we can populate\n  # bike_data_tbl &lt;- tibble()\n  # \n  # # Loop through all urls\n  # for (i in seq_along(bike_category_tbl$url)) {\n  #   \n  #   bike_category_url &lt;- bike_category_tbl$url[i]\n  #   bike_data_tbl     &lt;- bind_rows(bike_data_tbl, get_bike_data(bike_category_url))\n  #   \n  #   # Wait between each request to reduce the load on the server \n  #   # Otherwise we could get blocked\n  #   Sys.sleep(5)\n  #   \n  #   # print the progress\n  #   print(i)\n  #   \n  # }\n  # \n  # # Check for duplicates\n  # bike_data_tbl %&gt;%\n  #   group_by(id) %&gt;%\n  #   filter(n()&gt;1) %&gt;%\n  #   arrange(id) %&gt;% \n  #   View()\n  # \n  # # Filter non Canyon bikes (based on id length) and add an empty column for the colors\n  # bike_data_cleaned_tbl &lt;- bike_data_tbl %&gt;%\n  #   \n  #   # Filter for bikes. Only unique ones\n  #   filter(nchar(.$id) == 4) %&gt;%\n  #   filter(!(name %&gt;% str_detect(\"Frameset\"))) %&gt;%\n  #   distinct(id, .keep_all = T) %&gt;%\n  #   \n  #   # Split categories (Speedmax had to be treated individually)\n  #   mutate(category = replace(category, \n  #                             name == \"Speedmax CF SLX 8.0 SL\", \"Road/Triathlon Bike/Speedmax\")) %&gt;%\n  #   separate(col = category, into = c(\"category_1\",\n  #                                     \"category_2\",\n  #                                     \"category_3\"),\n  #            sep = \"(?&lt;!\\\\s)/(?!\\\\s)\") %&gt;%\n  #   \n  #   # Renaming\n  #   rename(\"year\"       = \"dimension50\") %&gt;%\n  #   rename(\"model\"      = \"name\") %&gt;%\n  #   rename(\"gender\"     = \"dimension63\") %&gt;%\n  #   rename(\"price_euro\" = \"metric4\") %&gt;%\n  #   \n  #   # Fix years manually (have checked the website)\n  #   mutate(year = replace_na(year, 2021)) %&gt;%\n  #   \n  #   # Add frame material\n  #   mutate(frame_material = case_when(\n  #     model %&gt;% str_detect(\" CF \") ~ \"carbon\",\n  #     model %&gt;% str_detect(\" CFR \") ~ \"carbon\",\n  #     TRUE ~ \"aluminium\"\n  #   )\n  #   ) %&gt;%\n  #   \n  #   # Select and order columns\n  #   select(-c(position, brand, variant, starts_with(\"dim\"), \n  #             quantity, feedProductId, price, metric5)) %&gt;%\n  #   select(id, model, year, frame_material, price_euro, everything())\n  # \n  # saveRDS(bike_data_cleaned_tbl, \"bike_data_cleaned_tbl.rds\")\n  # \n  # # 3.1a Get all color variations for each bike\n  # \n  # # Extract all bike urls\n  # bike_url_vec &lt;- bike_data_cleaned_tbl %&gt;% \n  #   pull(url)\n  # \n  # # Create function to get the variations\n  # get_colors &lt;- function(url) {\n  #   \n  #   url %&gt;%\n  #     \n  #     read_html() %&gt;%\n  #     \n  #     # Get all 'script nodes' and convert to char\n  #     html_nodes(css = \"script\") %&gt;%\n  #     as.character() %&gt;%\n  #     \n  #     # Select the node, that contains 'window.deptsfra'\n  #     str_subset(pattern = \"window.deptsfra\") %&gt;%\n  #     \n  #     # remove the chars that do not belong to the json\n  #     # 1. replace at the beginning everything until the first \"{\" with \"\"\n  #     str_replace(\"^[^\\\\{]+\", \"\") %&gt;%\n  #     # 2. replace at the end everything after the last \"}\" with \"\"\n  #     str_replace(\"[^\\\\}]+$\", \"\") %&gt;%\n  #     \n  #     # Convert from json to an r object and pick the relevant values\n  #     fromJSON() %&gt;%\n  #     purrr::pluck(\"productDetail\", \"variationAttributes\", \"values\", 1, \"value\")\n  # }\n  # \n  # # Run the function over all urls and add result to bike_data_cleaned_tbl\n  # # This will take a long time (~ 20-30 minutes) because we have to iterate over many bikes\n  # bike_data_colors_tbl &lt;- bike_data_cleaned_tbl %&gt;% \n  #   mutate(colors = map(bike_url_vec, get_colors))\n  # \n  # saveRDS(bike_data_colors_tbl, \"bike_data_colors_tbl.rds\")\n  # \n  # library(furrr)     # Parallel Processing using purrr (iteration)\n  # plan(\"multiprocess\")\n  # bike_data_colors_tbl &lt;- bike_data_cleaned_tbl %&gt;% \n  #   mutate(colors = future_map(bike_url_vec, get_colors))\n  # \n  # # 3.2 Create the urls for each variation\n  # \n  # bike_data_colors_tbl &lt;- bike_data_colors_tbl %&gt;%\n  #   \n  #   # Create entry for each color variation\n  #   unnest(colors) %&gt;%\n  #   \n  #   # Merge url and query parameters for the colors\n  #   mutate(url_color = glue(\"{url}?dwvar_{id}_pv_rahmenfarbe={colors}\")) %&gt;%\n  #   select(-url) %&gt;%\n  #   \n  #   # Use stringi to replace the last dash with the HTLM format of a dash (%2F)\n  #   # Only if there is a dash in the color column\n  #   mutate(url_color = ifelse(str_detect(colors, pattern = \"/\"),\n  #                             \n  #                             # if TRUE --&gt; replace      \n  #                             stringi::stri_replace_last_fixed(url_color, \"/\", \"%2F\"),\n  #                             \n  #                             # ELSE --&gt; take the original url\n  #                             url_color))\n  # \n  # bike_data_colors_tbl %&gt;% glimpse()\n  # \n  # # Create function\n  # get_sizes &lt;- function(url) {\n  #   \n  #   json &lt;- url %&gt;%\n  #     \n  #     read_html() %&gt;%\n  #     \n  #     # Get all 'script nodes' and convert to char\n  #     html_nodes(css = \"script\") %&gt;%\n  #     as.character() %&gt;%\n  #     \n  #     # Select the node, that contains 'window.deptsfra'\n  #     str_subset(pattern = \"window.deptsfra\") %&gt;%\n  #     \n  #     # remove the chars that do not belong to the json\n  #     # 1. replace at the beginning everything until the first \"{\" with \"\"\n  #     str_replace(\"^[^\\\\{]+\", \"\") %&gt;%\n  #     # 2. replace at the end everything after the last \"}\" with \"\"\n  #     str_replace(\"[^\\\\}]+$\", \"\") %&gt;%\n  #     \n  #     # Convert from json to an r object and pick the relevant values\n  #     fromJSON(flatten = T) %&gt;%\n  #     purrr::pluck(\"productDetail\", \"variationAttributes\", \"values\", 2) %&gt;%\n  #     \n  #     # select(id, value, available, availability)# %&gt;%\n  #     select(id, value, availability.onlyXLeftNumber) %&gt;%\n  #     \n  #     # Rename\n  #     rename(id_size = id) %&gt;%\n  #     rename(size = value) %&gt;%\n  #     rename(stock_availability = availability.onlyXLeftNumber) %&gt;%\n  #     \n  #     # Conver to tibble\n  #     as_tibble()\n  #   \n  # }\n  # \n  # # Pull url vector\n  # bike_url_color_vec &lt;- bike_data_colors_tbl %&gt;% \n  #   pull(url_color)\n  # \n  # # Map\n  # bike_data_sizes_tbl &lt;- bike_data_colors_tbl %&gt;% \n  #   mutate(size = future_map(bike_url_color_vec, get_sizes))\n  # \n  # # Unnest\n  # bike_data_sizes_tbl &lt;- bike_data_sizes_tbl %&gt;% \n  #   unnest(size)\n  # \n  # saveRDS(bike_data_sizes_tbl, \"bike_data_sizes_tbl.rds\")"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#api-call-and-data-extraction",
    "href": "content/01_journal/02_data_acquisition.html#api-call-and-data-extraction",
    "title": "Tidyverse",
    "section": "\n2.1 API call and data extraction",
    "text": "2.1 API call and data extraction\n\n# Challenge 2 ----\n\n# 1.0 LIBRARIES ----\n\nlibrary(tidyverse) # Main Package - Loads dplyr, purrr, etc.\nlibrary(rvest)     # HTML Hacking & Web Scraping\nlibrary(xopen)     # Quickly opening URLs\nlibrary(jsonlite)  # converts JSON files to R objects\nlibrary(glue)      # concatenate strings\nlibrary(stringi)   # character string/text processing\nlibrary(RSQLite)\nlibrary(httr)\n\n# Get api key from renviron file \napikey &lt;- Sys.getenv('key')\n\n# store openweathermap city id for hamburg to variable\ncity_id &lt;- 2911298\n\n# Call to openweathermao api \nweather &lt;- GET(glue(\"http://api.openweathermap.org/data/2.5/forecast?id={city_id}&APPID={apikey}\"))\n\n# convert API response body\nweather_extracted &lt;- rawToChar(weather$content)  %&gt;% fromJSON()\nweather_extracted  %&gt;% glimpse()\n\n#&gt; List of 5\n#&gt;  $ cod    : chr \"200\"\n#&gt;  $ message: int 0\n#&gt;  $ cnt    : int 40\n#&gt;  $ list   :'data.frame': 40 obs. of  10 variables:\n#&gt;   ..$ dt        : int [1:40] 1684767600 1684778400 1684789200 1684800000 1684810800 1684821600 1684832400 1684843200 1684854000 1684864800 ...\n#&gt;   ..$ main      :'data.frame':   40 obs. of  9 variables:\n#&gt;   .. ..$ temp      : num [1:40] 299 296 292 286 287 ...\n#&gt;   .. ..$ feels_like: num [1:40] 299 296 292 286 287 ...\n#&gt;   .. ..$ temp_min  : num [1:40] 297 290 288 286 287 ...\n#&gt;   .. ..$ temp_max  : num [1:40] 299 296 292 286 287 ...\n#&gt;   .. ..$ pressure  : int [1:40] 1012 1012 1012 1011 1011 1012 1014 1016 1017 1019 ...\n#&gt;   .. ..$ sea_level : int [1:40] 1012 1012 1012 1011 1011 1012 1014 1016 1017 1019 ...\n#&gt;   .. ..$ grnd_level: int [1:40] 1008 1009 1010 1009 1008 1010 1012 1013 1015 1016 ...\n#&gt;   .. ..$ humidity  : int [1:40] 42 61 79 99 99 97 90 63 57 70 ...\n#&gt;   .. ..$ temp_kf   : num [1:40] 2.47 6.41 3.8 0 0 0 0 0 0 0 ...\n#&gt;   ..$ weather   :List of 40\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   .. ..$ :'data.frame':  1 obs. of  4 variables:\n#&gt;   ..$ clouds    :'data.frame':   40 obs. of  1 variable:\n#&gt;   .. ..$ all: int [1:40] 20 40 73 78 90 95 99 98 100 78 ...\n#&gt;   ..$ wind      :'data.frame':   40 obs. of  3 variables:\n#&gt;   .. ..$ speed: num [1:40] 5.49 2.32 2.82 0.56 2.02 4.66 6.14 6.37 6.76 5.47 ...\n#&gt;   .. ..$ deg  : int [1:40] 111 298 127 226 296 326 315 311 310 300 ...\n#&gt;   .. ..$ gust : num [1:40] 9.84 5.41 7.08 0.64 5.74 ...\n#&gt;   ..$ visibility: int [1:40] 10000 1381 10000 10000 10000 10000 10000 10000 10000 10000 ...\n#&gt;   ..$ pop       : num [1:40] 0.16 0.99 1 1 0.58 0.53 0.34 0.3 0 0 ...\n#&gt;   ..$ sys       :'data.frame':   40 obs. of  1 variable:\n#&gt;   .. ..$ pod: chr [1:40] \"d\" \"d\" \"n\" \"n\" ...\n#&gt;   ..$ dt_txt    : chr [1:40] \"2023-05-22 15:00:00\" \"2023-05-22 18:00:00\" \"2023-05-22 21:00:00\" \"2023-05-23 00:00:00\" ...\n#&gt;   ..$ rain      :'data.frame':   40 obs. of  1 variable:\n#&gt;   .. ..$ 3h: num [1:40] NA 25.19 20.01 1.76 0.85 ...\n#&gt;  $ city   :List of 8\n#&gt;   ..$ id        : int 2911298\n#&gt;   ..$ name      : chr \"Hamburg\"\n#&gt;   ..$ coord     :List of 2\n#&gt;   .. ..$ lat: num 53.5\n#&gt;   .. ..$ lon: int 10\n#&gt;   ..$ country   : chr \"DE\"\n#&gt;   ..$ population: int 0\n#&gt;   ..$ timezone  : int 7200\n#&gt;   ..$ sunrise   : int 1684724969\n#&gt;   ..$ sunset    : int 1684783445\n\n# extract wind speed data from response\nwindspeed &lt;- weather_extracted$list$wind$speed\nwindspeed  %&gt;% glimpse()\n\n#&gt;  num [1:40] 5.49 2.32 2.82 0.56 2.02 4.66 6.14 6.37 6.76 5.47 ...\n\n# extract city name from response\ncity_name &lt;- weather_extracted$city$name\n\n# hour list\nhours &lt;- seq(0,120-1,3)\n\n# combine hour list and windspeed data\nwindspeed_tbl &lt;- tibble(hours, windspeed)\nwindspeed_tbl %&gt;% glimpse()\n\n#&gt; Rows: 40\n#&gt; Columns: 2\n#&gt; $ hours     &lt;dbl&gt; 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, …\n#&gt; $ windspeed &lt;dbl&gt; 5.49, 2.32, 2.82, 0.56, 2.02, 4.66, 6.14, 6.37, 6.76, 5.47, …"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#visualization",
    "href": "content/01_journal/02_data_acquisition.html#visualization",
    "title": "Tidyverse",
    "section": "\n2.2 Visualization",
    "text": "2.2 Visualization\n\n# plot results\nwindspeed_tbl %&gt;%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = hours, y = windspeed)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \"m/s\")) +\n  labs(\n    title = glue(\"Wind speed in {city_name}\"),\n    subtitle = \"Forecast for the next 5 days in 3 hour intervals\",\n    x = \"Nr. of hours into the future\", \n    y = \"Wind speed in m/s\")"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  }
]