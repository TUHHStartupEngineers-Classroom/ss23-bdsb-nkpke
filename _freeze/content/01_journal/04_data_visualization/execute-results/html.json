{
  "hash": "63c875d53db17e03afabfe05b5f18dce",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Nis Köpke\"\n---\n\n<details>\n<summary>Expand Data Visualization Preparation</summary>\n# Data Visualization Preparation\n(Code mainly from startupengineer templates)\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_0c1bf5686fbc51c0a1e8d3254f8d3ea8'}\n\n```{.r .cell-code}\n# Data Visualisation\n\n# Business Case 1: Lollipop Chart: Top N Customers\n\n# 1.0 Libraries ----\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\n\nbike_orderlines_tbl <- read_rds(\"./../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds\")\n\n# 2.0 Data Visualisation ----\nn <- 10\n# Data Manipulation\ntop_customers_tbl <- bike_orderlines_tbl %>%\n    \n    # Select relevant columns\n    select(bikeshop, total_price) %>%\n    \n    # Collapse the least frequent values into “other”\n    mutate(bikeshop = as_factor(bikeshop) %>% fct_lump(n = n, w = total_price)) %>%\n    \n    # Group and summarize\n    group_by(bikeshop) %>%\n    summarize(revenue = sum(total_price)) %>%\n    ungroup() %>%\n    \n    # Reorder the column customer_city by revenue\n    mutate(bikeshop = bikeshop %>% fct_reorder(revenue)) %>%\n    # Place \"Other\" at the beginning\n    mutate(bikeshop = bikeshop %>% fct_relevel(\"Other\", after = 0)) %>%\n    # Sort by this column\n    arrange(desc(bikeshop)) %>%\n    \n    # Add Revenue Text\n    mutate(revenue_text = scales::dollar(revenue, \n                                         scale  = 1e-6, \n                                         prefix = \"\", \n                                         suffix = \"M €\")) %>%\n    \n    # Add Cumulative Percent\n    mutate(cum_pct = cumsum(revenue) / sum(revenue)) %>%\n    mutate(cum_pct_text = scales::percent(cum_pct)) %>%\n    \n    # Add Rank\n    mutate(rank = row_number()) %>%\n    mutate(rank = case_when(\n        rank == max(rank) ~ NA_integer_,\n        TRUE ~ rank\n    )) %>%\n    \n    # Add Label text\n    mutate(label_text = str_glue(\"Rank: {rank}\\nRev: {revenue_text}\\nCumPct: {cum_pct_text}\"))\n\n# 3.0 Data Visualisation ----\ntop_customers_tbl %>%\n    \n    # Canvas\n    ggplot(aes(revenue, bikeshop)) +\n    \n    # Geometries\n    geom_segment(aes(xend = 0, yend = bikeshop), \n                 color = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")[11],\n                 size  = 1) +\n                 \n    geom_point(aes(size = revenue),\n               color = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")[11]) +\n    \n    geom_label(aes(label = label_text), \n               hjust = \"inward\",\n               size  = 3,\n               color = RColorBrewer::brewer.pal(n = 11, name = \"RdBu\")[11]) +\n    \n    # Formatting\n    scale_x_continuous(labels = scales::dollar_format(scale = 1e-6, \n                                                      prefix = \"\",\n                                                      suffix = \"M €\")) +\n    labs(\n        title = str_glue(\"Top {n} Customers\"),\n        subtitle = str_glue(\n              \"Start: {year(min(bike_orderlines_tbl$order_date))}\n               End:  {year(max(bike_orderlines_tbl$order_date))}\"),\n        x = \"Revenue (M €)\",\n        y = \"Customer\",\n        caption = str_glue(\"Top 6 customers contribute\n                           52% of purchasing power.\")\n    ) +\n    \n    theme_minimal() +\n    theme(\n        legend.position = \"none\",\n        plot.title = element_text(face = \"bold\"),\n        plot.caption = element_text(face = \"bold.italic\")\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Business Case 2: Purchasing preferences\n\n# 1.0 Libraries ----\n\n# 2.0 Data Manipulation ----\n# Select columns and filter categories\npct_sales_by_customer_tbl <- bike_orderlines_tbl %>%\n    \n    select(bikeshop, category_1, category_2, quantity) %>%\n    filter(category_1 %in% c(\"Mountain\",\"Road\")) %>% \n    \n    # Group by category and summarize\n    group_by(bikeshop, category_1, category_2) %>%\n    summarise(total_qty = sum(quantity)) %>%\n    ungroup() %>%\n    \n    # Add missing groups (not necessarily mandatory, but we'd get holes in the plot)\n    # complete() creates NAs. We need to set those to 0.\n    complete(bikeshop, nesting(category_1, category_2)) %>% \n    mutate(across(total_qty, ~replace_na(., 0))) %>%  \n    \n    # Group by bikeshop and calculate revenue ratio\n    group_by(bikeshop) %>%\n    mutate(pct = total_qty / sum(total_qty)) %>%\n    ungroup() %>%\n    \n    # Reverse order of bikeshops\n    mutate(bikeshop = as.factor(bikeshop) %>% fct_rev()) %>%\n    # Just to verify\n    mutate(bikeshop_num = as.numeric(bikeshop))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `summarise()` has grouped output by 'bikeshop', 'category_1'. You can override\n#> using the `.groups` argument.\n```\n:::\n\n```{.r .cell-code}\n# 3.0 Data Visualisation ----\n  pct_sales_by_customer_tbl %>%\n    \n    ggplot(aes(category_2, bikeshop)) +\n    \n    # Geometries\n    geom_tile(aes(fill = pct)) +\n    geom_text(aes(label = scales::percent(pct, accuracy = 1L)), \n              size = 3) +\n    facet_wrap(~ category_1, scales = \"free_x\") +\n    \n    # Formatting\n    scale_fill_gradient(low = \"white\", high = \"#2C3E50\") +\n    labs(\n      title = \"Heatmap of Purchasing Habits\",\n      x = \"Bike Type (Category 2)\",\n      y = \"Customer\",\n      caption = str_glue(\n        \"Customers that prefer Road: \n        To be discussed ...\n        \n        Customers that prefer Mountain: \n        To be discussed ...\")\n    ) +\n    \n    theme(\n      axis.text.x = element_text(angle = 45, hjust = 1),\n      legend.position = \"none\",\n      plot.title = element_text(face = \"bold\"),\n      plot.caption = element_text(face = \"bold.italic\")\n    )\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n\n</details>\n\n# Challenge 4.1 \n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_04047f4557e9e3ede6d86caffb9d2e88'}\n\n```{.r .cell-code}\n# 1.0 Load Libraries ----\nlibrary(tidyverse)\nlibrary(ggthemes)\n\n# loading data\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\") %>% \n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %>%\n  distinct()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 311510 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# adding total cases of all countries together for each day\ncovid_data_tbl <- covid_data_tbl %>%\n  filter(date < \"2023-05-15\") %>%\n  group_by(date) %>%\n  mutate(global_total_cases = sum(total_cases, na.rm = TRUE)) %>%\n  ungroup()\n\n# line plot of global total cases over time\ncovid_data_tbl %>%\n  ggplot(aes(date, global_total_cases)) +\n  geom_line() +\n  labs(\n    title = \"Global Total Cases over Time\",\n    subtitle = \"Source: Our World in Data\",\n    x = \"Date\",\n    y = \"Total Cases\"\n  ) +\n  theme_grey()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n# Challenge 4.2\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-3_b7b78c6613b762e884a1c4b8d96a927c'}\n\n```{.r .cell-code}\n# Creating column with mortality rate (total deaths / population)\ncovid_data_tbl <- covid_data_tbl %>%\n  mutate(mortality_rate = total_deaths / population)\n\nworld <- map_data(\"world\")\n\n# Visualising mortality rate on a map\ncovid_data_tbl %>%\n  filter(date == \"2023-05-01\") %>%\n  ggplot(aes(mortality_rate)) +\n  geom_map(aes(fill = mortality_rate, map_id = location), map = world) +\n  expand_limits(x = world$long, y = world$lat) +\n  coord_map(\"moll\") +\n  scale_fill_gradient2(low = \"green\", mid = \"grey\", high = \"red\", midpoint = 0.003) +\n  labs(\n    title = \"Mortality Rate by Country\",\n    subtitle = \"Source: Our World in Data\",\n    x = \"\",\n    y = \"\"\n  ) +\n  theme_map()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}